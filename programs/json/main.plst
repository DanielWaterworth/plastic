enum JArray
    j_empty_array |
    j_cons_array(JSON, JArray)
end

enum JObject
    j_empty_object |
    j_cons_object(String, JSON, JObject)
end

enum JSON
    j_null |
    j_true |
    j_false |
    j_string(String) |
    j_array(JArray) |
    j_object(JObject)
end

define next(s : String) -> (Char, String) do
    return (s.head(), s.drop(1));
end

define skip_whitespace(s : String) -> String do
    tail := s;
    do
        s := tail;
        next_char, tail := next(s);
    while (next_char == ' ')
    return s;
end

define parse_string_tail(s : String) -> (String, String) do
    dat := s;
    i := 0;
    do
        i := i + 1;
        dat := dat.tail();
        b := dat.head();
        if (b == '"')
            return (s.take(i), dat.tail());
        end
    while (true)
end

define parse_object_tail(s : String) -> (JObject, String) do
    s := skip_whitespace(s);
    next_char, s := next(s);
    if (next_char == '}')
        return (j_empty_object(), s);
    elsif (next_char == '"')
        string, s := parse_string_tail(s);
        s := skip_whitespace(s);
        colon, s := next(s);
        if (colon == ':')
            value, s := parse_any(s);
            rest, s := parse_object_tail(s);
            return (j_cons_object(string, value, rest), s);
        else
            throw void;
        end
    else
        throw void;
    end
end

define parse_array_tail(s : String) -> (JArray, String) do
    s := skip_whitespace(s);
    next_char, s := next(s);
    if (next_char == ']')
        return (j_empty_array(), s);
    else
        element, s := parse_start(next_char, s);
        elements, s := parse_array_tail(s);
        return (j_cons_array(element, elements), s);
    end
end

define parse_null_tail(s : String) -> (JSON, String) do
    if (s == "ull")
        return (j_null(), s.drop(3));
    else
        throw void;
    end
end

define parse_true_tail(s : String) -> (JSON, String) do
    if (s == "rue")
        return (j_true(), s.drop(3));
    else
        throw void;
    end
end

define parse_false_tail(s : String) -> (JSON, String) do
    if (s == "alse")
        return (j_false(), s.drop(4));
    else
        throw void;
    end
end

define parse_start(next_char : Char, s : String) -> (JSON, String) do
    if (next_char == '{')
        obj, s := parse_object_tail(s);
        return (j_object(obj), s);
    elsif (next_char == '[')
        array, s := parse_array_tail(s);
        return (j_array(array), s);
    elsif (next_char == 'n')
        return parse_null_tail(s);
    elsif (next_char == 't')
        return parse_true_tail(s);
    elsif (next_char == 'f')
        return parse_false_tail(s);
    elsif (next_char == '"')
        string, s := parse_string_tail(s);
        return (j_string(string), s);
    else
        throw void;
    end
end

define parse_any(s : String) -> (JSON, String) do
    s := skip_whitespace(s);

    next_char, s := next(s);
    return parse_start(next_char, s);
end

define parse(s : String) -> JSON do
    x, s := parse_any(s);
    return x;
end

define generate_array(json : JArray) -> String do
    throw void;
end

define generate_object_tail(json : JObject) -> String do
    match (json)
        j_empty_object do
            return "}";
        end
        j_cons_object(key, value, elements) do
            return ", " + generate_string(key) + ": " + generate(value) + generate_object_tail(elements);
        end
    end
end

define generate_object_tail_initial(json : JObject) -> String do
    match (json)
        j_empty_object do
            return "}";
        end
        j_cons_object(key, value, elements) do
            return generate_string(key) + ": " + generate(value) + generate_object_tail(elements);
        end
    end
end

define generate_object(json : JObject) -> String do
    return "{" + generate_object_tail_initial(json);
end

define generate_string(json : String) -> String do
    return "\"" + json + "\"";
end

define generate(json : JSON) -> String do
    match (json)
        j_null do
            return "null";
        end
        j_true do
            return "true";
        end
        j_false do
            return "false";
        end
        j_array(elements) do
            return generate_array(elements);
        end
        j_object(object) do
            return generate_object(object);
        end
        j_string(string) do
            return generate_string(string);
        end
    end
end

service Test()
    constructor new()
    end

    implements EntryPoint
        define main() -> Bool do
            sys print_string(generate(parse("null")));
            sys print_string(generate(parse("true")));
            sys print_string(generate(parse("false")));
            sys print_string(generate(parse("{}")));
            return true;
        end
    end
end

entry
    return Test().new();
end
