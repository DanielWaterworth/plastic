enum JArray
    j_empty_list |
    j_cons_array(JSON, JArray)
end

enum JObject
    j_empty_object |
    j_cons_object(ByteString, JSON, JObject)
end

enum JSON
    j_null |
    j_true |
    j_false |
    j_string(ByteString) |
    j_array(JArray) |
    j_object(JObject)
end

define parse_object(s : ByteString) -> (JSON, ByteString) do
    throw;
end

define parse_array(s : ByteString) -> (JSON, ByteString) do
    throw;
end

define parse_null(s : ByteString) -> (JSON, ByteString) do
    throw;
end

define parse_true(s : ByteString) -> (JSON, ByteString) do
    throw;
end

define parse_false(s : ByteString) -> (JSON, ByteString) do
    throw;
end

define parse_string(s : ByteString) -> (JSON, ByteString) do
    throw;
end

define parse(s : ByteString) -> (JSON, ByteString) do
    first_char := s.index(0);
    tail := s.slice(1, s.length());
    if (first_char == '{')
        return parse_object(tail);
    elsif (first_char == '[')
        return parse_array(tail);
    elsif (first_char == 'n')
        return parse_null(tail);
    elsif (first_char == 't')
        return parse_true(tail);
    elsif (first_char == 'f')
        return parse_false(tail);
    elsif (first_char == '"')
        return parse_string(tail);
    else
        throw;
    end
end

service Test()
    constructor new()
    end

    implements EntryPoint
        define main() -> Bool do
            parse("null");
            parse("{}");
            return true;
        end
    end
end

entry
    return Test().new();
end
