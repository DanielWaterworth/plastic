coroutine range(n : UInt) Void -> UInt do
    i := 0;
    do
        yield(i);
        i := i + 1;
    while(i < n)
    return void;
end

coroutine l(items : List(a)) Void -> a do
    for i in range(items.length()) do
        yield(items.index(i));
    end
    return void;
end

define first(items : List(a)) -> a do
    return items.index(0);
end
