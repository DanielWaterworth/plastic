coroutine range(n : UInt) Void -> UInt do
    if (n == 0)
        return void;
    end
    i := 0;
    do
        yield(i);
        i := i + 1;
    while(i < n)
    return void;
end

coroutine l(items : List(a)) Void -> a do
    for i in range(items.length()) do
        yield(items.index(i));
    end
    return void;
end

coroutine zip(a : Coroutine(Void, x), b : Coroutine(Void, y)) Void -> (x, y) do
    x := run(a);
    y := run(b);

    do
        if (is_done(a) or is_done(b))
            return void;
        else
            yield((x, y));
        end
        x := resume(a, void);
        y := resume(b, void);
    while (true)
    return void;
end
