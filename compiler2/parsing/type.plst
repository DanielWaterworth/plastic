import parsing.lex
import parsing.ts

enum Type
    quantified(String) |
    named_type(List(String), String, List(Type)) |
    tuple(List(Type)) |
    list_type(Type) |
    coroutine_type(Type, Type) |
    bool_type |
    uint_type |
    char_type |
    string_type |
    void_type
end

define parse_tuple_type(
            tokens : List(parsing.lex.Token),
            exp : Type
        )
        -> (Type, List(parsing.lex.Token)) do
    expressions := [exp];
    do
        exp, tokens := parse_type(tokens);
        expressions := expressions.append(exp);

        s, tokens := parsing.ts.assert_is_symbol(tokens);
        if (s == ",")
        elsif (s == ")")
            return (tuple(expressions), tokens);
        else
            throw void;
        end
    while (true)
end

define parse_bracketed_type(
            tokens : List(parsing.lex.Token)
        )
        -> (Type, List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_symbol(tokens, "(");
    exp, tokens := parse_type(tokens);
    s, tokens := parsing.ts.assert_is_symbol(tokens);
    if (s == ",")
        return parse_tuple_type(tokens, exp);
    elsif (s == ")")
        return (exp, tokens);
    else
        throw void;
    end
end

define parse_argument_list(
            tokens : List(parsing.lex.Token)
        )
        -> (List(Type), List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_symbol(tokens, "(");
    arguments := [] : (List(Type));

    s := parsing.ts.peek_symbol(tokens);
    match (s)
        just_string(s1) do
            if (s1 == ")")
                return (arguments, tokens.drop(1));
            end
        end
        nothing_string do
        end
    end

    exp, tokens := parse_type(tokens);
    arguments := arguments.append(exp);
    do
        s2, tokens := parsing.ts.assert_is_symbol(tokens);
        if (s2 == ",")
            exp, tokens := parse_type(tokens);
            arguments := arguments.append(exp);
        elsif (s2 == ")")
            return (arguments, tokens);
        else
            throw void;
        end
    while (true)
end

define parse_optional_argument_list(
            tokens : List(parsing.lex.Token)
        )
        -> (List(Type), List(parsing.lex.Token)) do
    s := parsing.ts.peek_symbol(tokens);
    match (s)
        just_string(s1) do
            if (s1 == "(")
                return parse_argument_list(tokens);
            end
        end
        nothing_string do
        end
    end
    return ([] : (List(Type)), tokens);
end

define parse_module_name(
            tokens : List(parsing.lex.Token)
        )
        -> (List(String), List(parsing.lex.Token)) do
    name, tokens := parsing.ts.assert_is_lower_name(tokens);
    module_name := [name];
    do
        s := parsing.ts.peek_symbol(tokens);
        match (s)
            just_string(s1) do
                if (s1 == ".")
                    n := parsing.ts.peek_lower_name(tokens.drop(1));
                    match (n)
                        just_string(n1) do
                            tokens := tokens.drop(2);
                            module_name := module_name.append(n1);
                        end
                        nothing_string do
                            return (module_name, tokens);
                        end
                    end
                else
                    return (module_name, tokens);
                end
            end
            nothing_string do
                return (module_name, tokens);
            end
        end
    while (true)
end

define parse_type(
            tokens : List(parsing.lex.Token)
        )
        -> (Type, List(parsing.lex.Token)) do
    match (tokens.index(0))
        symbol(s) do
            if (s == "(")
                return parse_bracketed_type(tokens);
            else
                throw void;
            end
        end
        lower_name(name) do
            tokens := tokens.drop(1);
            s := parsing.ts.peek_symbol(tokens);
            match (s)
                just_string(s1) do
                    if (s1 == ".")
                        tokens := tokens.drop(1);
                        match (tokens.index(0))
                            upper_name(t) do
                                args, tokens := parse_optional_argument_list(tokens.drop(1));
                                return (named_type([name], t, args), tokens);
                            end
                            lower_name(name) do
                                module_name, tokens := parse_module_name(tokens);
                                module_name := [name] + module_name;
                                tokens := parsing.ts.assert_symbol(tokens, ".");
                                t, tokens := parsing.ts.assert_is_upper_name(tokens);
                                args, tokens := parse_optional_argument_list(tokens);
                                return (named_type(module_name, t, args), tokens);
                            end
                        end
                    else
                        return (quantified(name), tokens);
                    end
                end
                nothing_string do
                    return (quantified(name), tokens);
                end
            end
        end
        upper_name(name) do
            args, tokens := parse_optional_argument_list(tokens.drop(1));
            return (named_type([] : (List(String)), name, args), tokens);
        end
    end
end
