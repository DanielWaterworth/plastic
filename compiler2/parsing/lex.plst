import iter

enum Token
    keyword(String) |
    symbol(String) |
    char(Char) |
    lower_name(String) |
    number(UInt) |
    property(String) |
    string(String) |
    upper_name(String)
end

define symbols() -> List(String) do
    return [
        "->",
        ":=",
        ")",
        "]",
        ":",
        ",",
        "/",
        ".",
        "==",
        ">=",
        ">",
        "<=",
        "<",
        "-",
        "*",
        "!=",
        "(",
        "[",
        "|",
        "+",
        ";"
    ];
end

define keywords() -> List(String) do
    return [
        "attr",
        "and",
        "constructor",
        "coroutine",
        "define",
        "do",
        "elsif",
        "else",
        "end",
        "entry",
        "enum",
        "false",
        "for",
        "if",
        "implements",
        "import",
        "in",
        "interface",
        "match",
        "not",
        "op",
        "or",
        "private",
        "return",
        "service",
        "sys",
        "throw",
        "true",
        "void",
        "while",
        "yield"
    ];
end

define starts_with(a : String, b : String) -> (Bool, String) do
    if (a.length() < b.length())
        return (false, "");
    elsif (a.take(b.length()) == b)
        return (true, a.drop(b.length()));
    else
        return (false, "");
    end
end

define next(source : String) -> (Char, String) do
    return (source.head(), source.tail());
end

define skip_comment(source : String) -> String do
    do
        if (source.length() == 0)
            return "";
        end
        c, source := next(source);
        if (c == '\n')
            return source;
        end
    while (source.length() != 0)
    return "";
end

define skip_whitespace(source : String) -> String do
    do
        if (source.length() == 0)
            return "";
        end
        c, tail := next(source);
        if (c.is_space())
            source := tail;
        elsif (c == '#')
            source := skip_comment(tail);
        else
            return source;
        end
    while (true)
    throw void;
end

define lex_char(source : String) -> (Token, String) do
    c, source := next(source);
    if (c == '\'')
        throw void;
    elsif (c == '\\')
        c, source := next(source);
        if (c == 'u')
            throw void;
        elsif (c == 'U')
            throw void;
        else
            close, source := next(source);
            if (not (close == '\''))
                throw void;
            end
            if (c == 'a')
                return (char('\a'), source);
            elsif (c == 'b')
                return (char('\b'), source);
            elsif (c == 'f')
                return (char('\f'), source);
            elsif (c == 'n')
               return (char('\n'), source);
            elsif (c == 'r')
                return (char('\r'), source);
            elsif (c == 't')
                return (char('\t'), source);
            elsif (c == 'v')
                return (char('\v'), source);
            elsif (c == '\\')
                return (char('\\'), source);
            elsif (c == '\'')
                return (char('\''), source);
            end
            throw void;
        end
    else
        close, source := next(source);
        if (not (close == '\''))
            throw void;
        end
        return (char(c), source);
    end
end

define lex_property(source : String) -> (Token, String) do
    i := 0;
    original := source;
    do
        c, source := next(source);
        i := i + 1;
    while (c.is_lower() or c == '_' or c.is_digit())
    taken := original.take(i-1);
    source := original.drop(i-1);
    return (property(taken), source);
end

define lex_string(source : String) -> (Token, String) do
    i := 0;
    original := source;
    do
        c, source := next(source);
        i := i + 1;
        if (c == '"')
            return (string(original.take(i-1)), source);
        elsif (c == '\\')
            c, source := next(source);
            if (c == '\\')
            elsif (c == '"')
            else
            end
            
        end
    while (true)
    throw void;
end

define lex_lower(source : String) -> (Token, String) do
    i := 0;
    original := source;
    do
        c, source := next(source);
        i := i + 1;
    while (c.is_lower() or c == '_' or c.is_digit())
    taken := original.take(i-1);
    source := original.drop(i-1);
    for key in iter.l(keywords()) do
        if (taken == key)
            return (keyword(key), source);
        end
    end
    return (lower_name(taken), source);
end

define lex_upper(source : String) -> (Token, String) do
    i := 0;
    original := source;
    do
        c, source := next(source);
        i := i + 1;
    while (c.is_lower() or c.is_upper() or c.is_digit())
    return (upper_name(original.take(i-1)), original.drop(i-1));
end

define lex_digit(source : String) -> (Token, String) do
    n := 0;
    tail := source;
    do
        source := tail;
        c, tail := next(source);
        if (c.is_digit())
            n := n * 10;
        end
        if (c == '0')
            n := n + 0;
        elsif (c == '1')
            n := n + 1;
        elsif (c == '2')
            n := n + 2;
        elsif (c == '3')
            n := n + 3;
        elsif (c == '4')
            n := n + 4;
        elsif (c == '5')
            n := n + 5;
        elsif (c == '6')
            n := n + 6;
        elsif (c == '7')
            n := n + 7;
        elsif (c == '8')
            n := n + 8;
        elsif (c == '9')
            n := n + 9;
        else
            return (number(n), source);
        end
    while (true)
    throw void;
end

define lex_token(source : String) -> (Token, String) do
    for s in iter.l(symbols()) do
        b, tail := starts_with(source, s);
        if (b)
            return (symbol(s), tail);
        end
    end
    c, tail := next(source);
    if (c == '\'')
        return lex_char(tail);
    elsif (c == '@')
        return lex_property(tail);
    elsif (c == '"')
        return lex_string(tail);
    elsif (c.is_lower())
        return lex_lower(source);
    elsif (c.is_upper())
        return lex_upper(source);
    elsif (c.is_digit())
        return lex_digit(source);
    end
    throw void;
end

define lex(source : String) -> List(Token) do
    tokens := [] : (List(Token));
    source := skip_whitespace(source);
    do
        token, source := lex_token(source);
        tokens := tokens.append(token);
        source := skip_whitespace(source);
    while (source.length() != 0)
    return tokens;
end
