import parsing.lex
import parsing.ts
import parsing.expr

enum IfTail
    end_ |
    else_(Block) |
    elsif_(parsing.expr.Expression, Block, IfTail)
end

enum Clause
    clause(String, List(String), Block)
end

enum Destructure
    name_destructure(String) |
    property_destructor(String) |
    tuple_destructure(List(Destructure))
end

enum MaybeDestructure
    just_destructure(Destructure) |
    nothing_destructure
end

enum Statement
    assignment(Destructure, parsing.expr.Expression) |
    if_(parsing.expr.Expression, Block, IfTail) |
    do_while(Block, parsing.expr.Expression) |
    for_(String, parsing.expr.Expression, Block) |
    match_(parsing.expr.Expression, List(Clause)) |
    exp_(parsing.expr.Expression)
end

enum Terminator
    return_(parsing.expr.Expression) |
    throw_(parsing.expr.Expression) |
    no_terminator
end

enum Block
    block(List(Statement), Terminator)
end

define parse_if_tail(
            tokens : List(parsing.lex.Token)
        )
        -> (IfTail, List(parsing.lex.Token)) do
    k, tokens := parsing.ts.assert_is_keyword(tokens);
    if (k == "end")
        return (end_(), tokens);
    elsif (k == "else")
        block, tokens := parse_code_block(tokens);
        tokens := parsing.ts.assert_keyword(tokens, "end");
        return (else_(block), tokens);
    elsif (k == "elsif")
        tokens := parsing.ts.assert_symbol(tokens, "(");
        exp, tokens := parsing.expr.parse_expression(tokens);
        tokens := parsing.ts.assert_symbol(tokens, ")");
        block, tokens := parse_code_block(tokens);
        tail, tokens := parse_if_tail(tokens);
        return (elsif_(exp, block, tail), tokens);
    end
    throw void;
end

define parse_if(
            tokens : List(parsing.lex.Token)
        )
        -> (Statement, List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_keyword(tokens, "if");
    tokens := parsing.ts.assert_symbol(tokens, "(");
    exp, tokens := parsing.expr.parse_expression(tokens);
    tokens := parsing.ts.assert_symbol(tokens, ")");
    block, tokens := parse_code_block(tokens);
    tail, tokens := parse_if_tail(tokens);
    return (if_(exp, block, tail), tokens);
end

define parse_do_while(
            tokens : List(parsing.lex.Token)
        )
        -> (Statement, List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_keyword(tokens, "do");
    block, tokens := parse_code_block(tokens);
    tokens := parsing.ts.assert_keyword(tokens, "while");
    tokens := parsing.ts.assert_symbol(tokens, "(");
    exp, tokens := parsing.expr.parse_expression(tokens);
    tokens := parsing.ts.assert_symbol(tokens, ")");
    return (do_while(block, exp), tokens);
end

define parse_for(
            tokens : List(parsing.lex.Token)
        )
        -> (Statement, List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_keyword(tokens, "for");
    name, tokens := parsing.ts.assert_is_lower_name(tokens);
    tokens := parsing.ts.assert_keyword(tokens, "in");
    exp, tokens := parsing.expr.parse_expression(tokens);
    tokens := parsing.ts.assert_keyword(tokens, "do");
    block, tokens := parse_code_block(tokens);
    tokens := parsing.ts.assert_keyword(tokens, "end");
    return (for_(name, exp, block), tokens);
end

define parse_parameter_list(
            tokens : List(parsing.lex.Token)
        )
        -> (List(String), List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_symbol(tokens, "(");
    parameters := [] : (List(String));
    do
        token := tokens.index(0);
        match (token)
            lower_name(name) do
                name, tokens := parsing.ts.assert_is_lower_name(tokens);
                parameters := parameters.append(name);
            end
            symbol(s) do
                if (s == ",")
                    tokens := tokens.drop(1);
                else
                    tokens := parsing.ts.assert_symbol(tokens, ")");
                    return (parameters, tokens);
                end
            end
        end
    while(true)
    throw void;
end

define parse_optional_parameter_list(
            tokens : List(parsing.lex.Token)
        )
        -> (List(String), List(parsing.lex.Token)) do
    s := parsing.ts.peek_symbol(tokens);

    match (s)
        just_string(s1) do
            if (s1 == "(")
                return parse_parameter_list(tokens);
            end
        end
        nothing_string do
        end
    end

    return ([] : (List(String)), tokens);
end

define parse_match_clause(
            tokens : List(parsing.lex.Token)
        )
        -> (Clause, List(parsing.lex.Token)) do
    name, tokens := parsing.ts.assert_is_lower_name(tokens);
    parameters, tokens := parse_optional_parameter_list(tokens);
    tokens := parsing.ts.assert_keyword(tokens, "do");
    block, tokens := parse_code_block(tokens);
    tokens := parsing.ts.assert_keyword(tokens, "end");
    return (clause(name, parameters, block), tokens);
end

define parse_match_clauses(
            tokens : List(parsing.lex.Token)
        )
        -> (List(Clause), List(parsing.lex.Token)) do
    clauses := [] : (List(Clause));
    do
        key := parsing.ts.peek_keyword(tokens);
        match (key)
            just_string(key1) do
                if (key1 == "end")
                    return (clauses, tokens);
                end
                throw void;
            end
            nothing_string do
            end
        end

        clause, tokens := parse_match_clause(tokens);
        clauses := clauses.append(clause);
    while (true)
end

define parse_match(
            tokens : List(parsing.lex.Token)
        )
        -> (Statement, List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_keyword(tokens, "match");
    tokens := parsing.ts.assert_symbol(tokens, "(");
    exp, tokens := parsing.expr.parse_expression(tokens);
    tokens := parsing.ts.assert_symbol(tokens, ")");
    clauses, tokens := parse_match_clauses(tokens);
    tokens := parsing.ts.assert_keyword(tokens, "end");
    return (match_(exp, clauses), tokens);
end

define parse_return(
            tokens : List(parsing.lex.Token)
        )
        -> (Terminator, List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_keyword(tokens, "return");
    s := parsing.ts.peek_symbol(tokens);
    match (s)
        just_string(s1) do
            if (s1 == ";")
                return (return_(parsing.expr.void_literal()), tokens.drop(1));
            end
        end
        nothing_string do
        end
    end
    exp, tokens := parsing.expr.parse_expression(tokens);
    tokens := parsing.ts.assert_symbol(tokens, ";");
    return (return_(exp), tokens);
end

define parse_throw(
            tokens : List(parsing.lex.Token)
        )
        -> (Terminator, List(parsing.lex.Token)) do
    tokens := parsing.ts.assert_keyword(tokens, "throw");
    exp, tokens := parsing.expr.parse_expression(tokens);
    tokens := parsing.ts.assert_symbol(tokens, ";");
    return (throw_(exp), tokens);
end

define parse_maybe_destructure_atom(
            tokens : List(parsing.lex.Token)
        )
        -> (MaybeDestructure, List(parsing.lex.Token)) do
    match (tokens.index(0))
        property(p) do
            return (just_destructure(property_destructor(p)), tokens.drop(1));
        end
        lower_name(n) do
            return (just_destructure(name_destructure(n)), tokens.drop(1));
        end
        keyword(s) do
        end
        symbol(s) do
        end
        char(c) do
        end
        number(n) do
        end
        string(s) do
        end
        upper_name(u) do
        end
    end
    return (nothing_destructure(), tokens);
end

define parse_destructure_atom(
            tokens : List(parsing.lex.Token)
        )
        -> (Destructure, List(parsing.lex.Token)) do
    d, tokens := parse_maybe_destructure_atom(tokens);
    match (d)
        just_destructure(d1) do
            return (d1, tokens);
        end
    end
end

define parse_destructure(
            tokens : List(parsing.lex.Token)
        )
        -> (MaybeDestructure, List(parsing.lex.Token)) do
    d, tokens1 := parse_maybe_destructure_atom(tokens);
    match (d)
        just_destructure(d1) do
        end
        nothing_destructure do
            return (nothing_destructure(), tokens);
        end
    end

    s := parsing.ts.peek_symbol(tokens1);
    match (s)
        just_string(s1) do
        end
        nothing_string do
            return (nothing_destructure(), tokens);
        end
    end

    if (s1 == ",")
        tokens := tokens1.drop(1);
        variables := [d1];
        do
            d1, tokens := parse_destructure_atom(tokens);
            variables := variables.append(d1);
            s1, tokens := parsing.ts.assert_is_symbol(tokens);
            if (s1 == ",")
            elsif (s1 == ":=")
                return (just_destructure(tuple_destructure(variables)), tokens);
            else
                throw void;
            end
        while (true)
    elsif (s1 == ":=")
        return (just_destructure(d1), tokens.drop(2));
    else
        return (nothing_destructure(), tokens);
    end
end

define parse_other_statement(
            tokens : List(parsing.lex.Token)
        )
        -> (Statement, List(parsing.lex.Token)) do
    d, tokens1 := parse_destructure(tokens);
    match (d)
        just_destructure(d1) do
            exp, tokens := parsing.expr.parse_expression(tokens1);
            tokens := parsing.ts.assert_symbol(tokens, ";");
            return (assignment(d1, exp), tokens);
        end
        nothing_destructure do
        end
    end
    exp, tokens := parsing.expr.parse_expression(tokens);
    tokens := parsing.ts.assert_symbol(tokens, ";");
    return (exp_(exp), tokens);
end

define parse_code_block(
            tokens : List(parsing.lex.Token)
        )
        -> (Block, List(parsing.lex.Token)) do
    statements := [] : (List(Statement));
    do
        k := parsing.ts.peek_keyword(tokens);
        match (k)
            just_string(k1) do
                if (k1 == "if")
                    statement, tokens := parse_if(tokens);
                    statements := statements.append(statement);
                elsif (k1 == "do")
                    statement, tokens := parse_do_while(tokens);
                    statements := statements.append(statement);
                elsif (k1 == "for")
                    statement, tokens := parse_for(tokens);
                    statements := statements.append(statement);
                elsif (k1 == "match")
                    statement, tokens := parse_match(tokens);
                    statements := statements.append(statement);
                elsif (k1 == "return")
                    terminator, tokens := parse_return(tokens);
                    return (block(statements, terminator), tokens);
                elsif (k1 == "throw")
                    terminator, tokens := parse_throw(tokens);
                    return (block(statements, terminator), tokens);
                elsif (k1 == "while")
                    return (block(statements, no_terminator()), tokens);
                elsif (k1 == "end")
                    return (block(statements, no_terminator()), tokens);
                elsif (k1 == "else")
                    return (block(statements, no_terminator()), tokens);
                elsif (k1 == "elsif")
                    return (block(statements, no_terminator()), tokens);
                else
                    statement, tokens := parse_other_statement(tokens);
                    statements := statements.append(statement);
                end
            end
            nothing_string do
                statement, tokens := parse_other_statement(tokens);
                statements := statements.append(statement);
            end
        end
    while (true)
    throw void;
end
