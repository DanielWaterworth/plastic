import parsing.lex

enum MaybeString
    just_string(String) |
    nothing_string
end

define assert(b : Bool) -> Void do
    if (not b)
        throw void;
    end
    return void;
end

define assert_is_keyword(
            tokens : List(parsing.lex.Token)
        )
        -> (String, List(parsing.lex.Token)) do
    match (tokens.index(0))
        keyword(k) do
            return (k, tokens.drop(1));
        end
    end
    throw void;
end

define assert_keyword(
            tokens : List(parsing.lex.Token),
            k : String
        )
        -> List(parsing.lex.Token) do
    key, tokens := assert_is_keyword(tokens);
    assert(key == k);
    return tokens;
end

define assert_is_symbol(
            tokens : List(parsing.lex.Token)
        )
        -> (String, List(parsing.lex.Token)) do
    match (tokens.index(0))
        symbol(k) do
            return (k, tokens.drop(1));
        end
    end
    throw void;
end

define assert_symbol(
            tokens : List(parsing.lex.Token),
            k : String
        )
        -> List(parsing.lex.Token) do
    key, tokens := assert_is_symbol(tokens);
    assert(key == k);
    return tokens;
end

define assert_is_lower_name(
            tokens : List(parsing.lex.Token)
        )
        -> (String, List(parsing.lex.Token)) do
    match (tokens.index(0))
        lower_name(k) do
            return (k, tokens.drop(1));
        end
    end
    throw void;
end

define assert_is_upper_name(
            tokens : List(parsing.lex.Token)
        )
        -> (String, List(parsing.lex.Token)) do
    match (tokens.index(0))
        upper_name(k) do
            return (k, tokens.drop(1));
        end
    end
    throw void;
end

define peek_symbol(
            tokens : List(parsing.lex.Token)
        )
        -> MaybeString do
    match (tokens.index(0))
        symbol(s) do
            return just_string(s);
        end
        keyword(s) do
            return nothing_string();
        end
        char(c) do
            return nothing_string();
        end
        lower_name(n) do
            return nothing_string();
        end
        number(n) do
            return nothing_string();
        end
        property(p) do
            return nothing_string();
        end
        string(s) do
            return nothing_string();
        end
        upper_name(u) do
            return nothing_string();
        end
    end
end

define peek_keyword(
            tokens : List(parsing.lex.Token)
        )
        -> MaybeString do
    match (tokens.index(0))
        keyword(s) do
            return just_string(s);
        end
        symbol(s) do
            return nothing_string();
        end
        char(c) do
            return nothing_string();
        end
        lower_name(n) do
            return nothing_string();
        end
        number(n) do
            return nothing_string();
        end
        property(p) do
            return nothing_string();
        end
        string(s) do
            return nothing_string();
        end
        upper_name(u) do
            return nothing_string();
        end
    end
end

define peek_lower_name(
            tokens : List(parsing.lex.Token)
        )
        -> MaybeString do
    match (tokens.index(0))
        lower_name(n) do
            return just_string(n);
        end
        keyword(s) do
            return nothing_string();
        end
        symbol(s) do
            return nothing_string();
        end
        char(c) do
            return nothing_string();
        end
        number(n) do
            return nothing_string();
        end
        property(p) do
            return nothing_string();
        end
        string(s) do
            return nothing_string();
        end
        upper_name(u) do
            return nothing_string();
        end
    end
end
