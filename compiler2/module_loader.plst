import string
import iter
import file
import parsing.lex
import parsing.parser
import printer
import module

interface ModuleLoader
    load(String, String) -> List((List(String), parsing.parser.Module));
end

# Work around for compiler bug
define module_eq(a : List(String), b : List(String)) -> Bool do
    return module.eq(a, b);
end

define has_module(module1 : List(String), modules : List((List(String), a))) -> Bool do
    return module.has(module1, modules);
end

define has_any_module(a : List(List(String)), b : List((List(String), a))) -> Bool do
    return module.has_any(a, b);
end

define remove(module1 : List(String), modules : List((List(String), a))) -> List((List(String), a)) do
    return module.remove(module1, modules);
end

service FileModuleLoader(
            f : file.FileOps,
            p : printer.Printer
        )
    constructor new()
    end

    implements ModuleLoader
        define load(dir : String, module1 : String) -> List((List(String), parsing.parser.Module)) do
            to_load := [[module1]];
            loaded := [] : (List((List(String), parsing.parser.Module)));
            do
                to_load, module_name := to_load.pop();
                if (not has_module(module_name, loaded))
                    m := self.load_module(dir, module_name);
                    match (m)
                        module(imports, decls) do
                        end
                    end
                    loaded := loaded.append((module_name, m));
                    to_load := to_load.extend(imports);
                end
            while (to_load.length() > 0)

            for m in iter.l(loaded) do
                name, mod := m;
            end

            ordered := [] : (List((List(String), parsing.parser.Module)));
            do
                added := false;
                for m in iter.l(loaded) do
                    name, mod := m;
                    match (mod)
                        module(imports, decls) do
                        end
                    end

                    if (not has_any_module(imports, loaded))
                        added := true;
                        ordered := ordered.append(m);
                        loaded := remove(name, loaded);
                    end
                end
                if (not added)
                    debug("recursive module imports");
                    throw void;
                end
            while (loaded.length() > 0)

            return ordered;
        end
    end

    private
        define load_module(dir : String, module1 : List(String)) -> parsing.parser.Module do
            module_name := string.join(module1, ".");
            @p.print("loading: " + module_name);
            lib := @f.exists((string.join(["./lib"] + module1, "/") + ".plst").encode_utf8());
            if (lib)
                dir := "./lib";
            end
            fd := @f.open((string.join([dir] + module1, "/") + ".plst").encode_utf8(), 0);
            source := @f.read(fd, 102400).decode_utf8();
            if (source.length() == 102400)
                debug("too large");
                throw void;
            end
            @f.close(fd);
            tokens := parsing.lex.lex(source);
            return parsing.parser.parse(tokens);
        end
    end
end
