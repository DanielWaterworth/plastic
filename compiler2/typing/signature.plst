import iter
import parsing.parser
import typing.type
import module

enum TypeInterface
    enum_interface(UInt) |
    interface_interface(UInt) |
    service_interface
end

enum ModuleInterface
    module_interface(List((String, TypeInterface)))
end

enum ModuleInterfaceContext
    module_interface_context(
        List((List(String), ModuleInterface)),
        ModuleInterface,
        List(String)
    )
end

define construct_module_interface(
            mod : parsing.parser.Module
        )
        -> ModuleInterface do
    match(mod)
        module(imports, decls) do
        end
    end

    type_interfaces := [] : (List((String, TypeInterface)));

    for decl in iter.l(decls) do
        match(decl)
            enum_(name, types, constructors) do
                type_interfaces := type_interfaces.append((name, enum_interface(types.length())));
            end
            service_(name, dependencies, service_decls) do
                type_interfaces := type_interfaces.append((name, service_interface()));
            end
            interface_(name, types, signatures) do
                type_interfaces := type_interfaces.append((name, interface_interface(types.length())));
            end
            entry_(block) do
            end
            fun_(f) do
            end
        end
    end

    return module_interface(type_interfaces);
end

define lookup_type_on_interface(
            context : ModuleInterface,
            name : String
        )
        -> TypeInterface do
    match (context)
        module_interface(types) do
        end
    end

    for v in iter.l(types) do
        name1, m := v;
        if (name1 == name)
            return m;
        end
    end
end

define lookup_type(
            modules : List((List(String), ModuleInterface)),
            mod : ModuleInterface,
            module_name : List(String),
            name : String
        )
        -> TypeInterface do
    if (module_name.length() != 0)
        mod := module.lookup(module_name, modules);
    end

    return lookup_type_on_interface(mod, name);
end

define resolve_type(
            context : ModuleInterfaceContext,
            quantifiers : typing.type.TypeContext,
            t : parsing.type.Type
        )
        -> (typing.type.TypeContext, typing.type.TType) do
    match(context)
        module_interface_context(modules, current_module, current_module_name) do
        end
    end

    match (t)
        quantified(name) do
            debug("resolve_type quantified");
        end
        named_type(mod, name, parameters) do
            if (mod.length() == 0)
                if (name == "String")
                    return (quantifiers, typing.type.string_type());
                elsif (name == "Void")
                    return (quantifiers, typing.type.void_type());
                elsif (name == "UInt")
                    return (quantifiers, typing.type.uint_type());
                end
            end

            type := lookup_type(modules, current_module, mod, name);
            match (type)
                enum_interface(n) do
                    if (n != parameters.length())
                        debug("wrong number of parameters for " + name);
                        throw void;
                    end
                end
                interface_interface(n) do
                    if (n != parameters.length())
                        debug("wrong number of parameters for " + name);
                        throw void;
                    end
                end
                service_interface do
                    if (parameters.length() != 0)
                        debug("wrong number of parameters for " + name);
                        throw void;
                    end
                end
            end

            parameters1 := [] : (List(typing.type.TType));
            for param in iter.l(parameters) do
                quantifiers, param1 := resolve_type(context, quantifiers, param);
                parameters1 := parameters1.append(param1);
            end

            if (mod.length() == 0)
                mod := current_module_name;
            end

            return (quantifiers, typing.type.instantiation(mod, name, parameters1));
        end
        tuple(types) do
            debug("resolve_type tuple");
        end
    end
end

define template_type(
            quantifier : typing.type.TypeContext,
            t : typing.type.TType
        )
        -> typing.type.TType do
    debug("template_type");
end

define check_type(
            context : ModuleInterfaceContext,
            t : parsing.type.Type
        )
        -> typing.type.TType do
    ctx := typing.type.empty_type_context();
    ctx, t1 := resolve_type(context, ctx, t);
    return t1;
end

define construct_interface_signature(
            context : ModuleInterfaceContext,
            types : List(String),
            signatures : List((String, List(parsing.type.Type), parsing.type.Type))
        )
        -> typing.type.TypeSignature do
    signatures1 := [] : (List((String, typing.type.FunctionSignature)));
    for signature in iter.l(signatures) do
        name, argument_types, return_type := signature;

        argument_types1 := [] : (List(typing.type.TType));
        for arg in iter.l(argument_types) do
            argument_types1.append(check_type(context, arg));
        end

        return_type1 := check_type(context, return_type);
    end

    return typing.type.interface_signature(types, signatures1);
end

define construct_service_signature(
            context : ModuleInterfaceContext,
            decls : List(parsing.parser.ServiceDecl)
        )
        -> typing.type.TypeSignature do
    return typing.type.service_signature();
end

define construct_function_signature(
            context : ModuleInterfaceContext,
            f : parsing.parser.Function
        )
        -> (String, typing.type.FunctionSignature) do
    match (f)
        function_(name, parameters, return_type, body) do
            argument_types1 := [] : (List(typing.type.TType));
            for param in iter.l(parameters) do
                param_name, arg := param;
                argument_types1.append(check_type(context, arg));
            end

            return_type1 := check_type(context, return_type);
            return (name, typing.type.function_signature(argument_types1, return_type1));
        end
        coroutine_(name, parameters, receive_type, yield_type, body) do
            argument_types1 := [] : (List(typing.type.TType));
            for param in iter.l(parameters) do
                param_name, arg := param;
                argument_types1.append(check_type(context, arg));
            end

            receive_type1 := check_type(context, receive_type);
            yield_type1 := check_type(context, yield_type);
            return (name, typing.type.coroutine_signature(argument_types1, receive_type1, yield_type1));
        end
    end
    throw void;
end

define construct_module_signatures(
            context : ModuleInterfaceContext,
            mod : parsing.parser.Module
        )
        -> typing.type.ModuleSignature do
    match(mod)
        module(imports, decls) do
        end
    end

    functions := [] : (List((String, typing.type.FunctionSignature)));
    types := [] : (List((String, typing.type.TypeSignature)));

    for decl in iter.l(decls) do
        match(decl)
            enum_(name, parameters, constructors) do
                debug("enum signature");
                throw void;
            end
            service_(name, dependencies, service_decls) do
                serv := construct_service_signature(context, service_decls);
                types := types.append((name, serv));
            end
            interface_(name, parameters, signatures) do
                int := construct_interface_signature(context, parameters, signatures);
                types := types.append((name, int));
            end
            entry_(block) do
            end
            fun_(f) do
                fun := construct_function_signature(context, f);
                functions := functions.append(fun);
            end
        end
    end

    return typing.type.module_signature(functions, types);
end
