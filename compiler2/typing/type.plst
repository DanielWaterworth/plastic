import parsing.type

enum ModuleSignature
    module_signature
end

enum ModuleContext
    module_context(List((List(String), ModuleSignature)), ModuleSignature)
end

enum TType
    bool_type |
    uint_type |
    char_type |
    string_type |
    void_type |
    quantified(String) |
    list_type(TType) |
    coroutine_type(TType, TType)
end

enum MaybeTType
    just_ttype(TType) |
    nothing_ttype
end

enum Context
    context(
        ModuleContext,
        List((String, TType)), # dependencies
        List((String, TType)), # attrs
        List((String, TType)) # variables
    )
end

enum TypeContext
    type_context(
        List((String, TType))
    )
end

define empty_type_context() -> TypeContext do
    return type_context([] : (List((String, TType))));
end

define resolve_type(
            context : ModuleContext,
            quantifiers : TypeContext,
            t : parsing.type.Type
        )
        -> (TypeContext, TType) do
    match (t)
        quantified(name) do
            debug("resolve_type quantified");
        end
        named_type(module, name, parameters) do
            if (module.length() == 0)
                debug(("resolve_type local named_type", name, parameters));
            else
                debug("resolve_type imported named_type");
            end
        end
        tuple(types) do
            debug("resolve_type tuple");
        end
    end
end

define template_type(
            quantifier : TypeContext,
            t : TType
        )
        -> TType do
    debug("template_type");
end
