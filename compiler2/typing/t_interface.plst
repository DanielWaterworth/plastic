import parsing.parser
import iter

enum TypeInterface
    enum_interface(UInt) |
    interface_interface(UInt) |
    service_interface
end

enum ModuleInterface
    module_interface1(List((String, TypeInterface)))
end

define construct_module_interface(
            mod : parsing.parser.Module
        )
        -> ModuleInterface do
    match(mod)
        module(imports, decls) do
        end
    end

    type_interfaces := [] : (List((String, TypeInterface)));

    for decl in iter.l(decls) do
        match(decl)
            enum_(name, types, constructors) do
                type_interfaces := type_interfaces.append((name, enum_interface(types.length())));
            end
            service_(name, dependencies, service_decls) do
                type_interfaces := type_interfaces.append((name, service_interface()));
            end
            interface_(name, types, signatures) do
                type_interfaces := type_interfaces.append((name, interface_interface(types.length())));
            end
            entry_(block) do
            end
            fun_(f) do
            end
        end
    end

    return module_interface1(type_interfaces);
end
