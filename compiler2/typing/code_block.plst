import iter
import parsing.expr
import parsing.code_block
import typing.type
import typing.expr

enum TIfTail
    end_ |
    else_(TBlock) |
    elsif_(typing.expr.TExpression, TBlock, TIfTail)
end

enum TClause
    clause(String, List(String), TBlock)
end

enum TStatement
    assignment(parsing.code_block.Destructure, typing.expr.TExpression) |
    if_(typing.expr.TExpression, TBlock, TIfTail) |
    do_while(TBlock, typing.expr.TExpression) |
    for_(String, typing.expr.TExpression, TBlock) |
    match_(typing.expr.TExpression, List(TClause)) |
    exp_(typing.expr.TExpression)
end

enum TTerminator
    return_(typing.expr.TExpression) |
    throw_(typing.expr.TExpression) |
    no_terminator
end

enum TBlock
    t_block(List(TStatement), TTerminator)
end

define check_statement(
            context : typing.type.Context,
            statement : parsing.code_block.Statement
        )
        -> (typing.type.Context, TStatement) do
    match (statement)
        assignment(pattern, exp) do
            typing.expr.check_expression(context, exp, typing.type.nothing_ttype());
            debug("assignment");
        end
        if_(exp, true_block, tail) do
            typing.expr.check_expression(context, exp, typing.type.nothing_ttype());
            debug("if");
        end
        do_while(block, exp) do
            debug("do while");
        end
        for_(name, exp, block) do
            typing.expr.check_expression(context, exp, typing.type.nothing_ttype());
            debug("for");
        end
        match_(exp, clauses) do
            typing.expr.check_expression(context, exp, typing.type.nothing_ttype());
            debug("match");
        end
        exp_(exp) do
            return (context, exp_(typing.expr.check_expression(context, exp, typing.type.nothing_ttype())));
        end
    end
end

define check_terminator(
            context : typing.type.Context,
            terminator : parsing.code_block.Terminator
        )
        -> TTerminator do
    match (terminator)
        no_terminator do
            return no_terminator();
        end
        return_(exp) do
            debug("TODO: missing return type in context");
            expected := typing.type.nothing_ttype();
            return return_(typing.expr.check_expression(context, exp, expected));
        end
        throw_(exp) do
            debug("throw");
        end
    end
end

define check_block(
            context : typing.type.Context,
            block : parsing.code_block.Block
        )
        -> (typing.type.Context, TBlock) do
    match (block)
        block(statements, terminator) do
            statements1 := [] : (List(TStatement));
            for statement in iter.l(statements) do
                context, statement1 := check_statement(context, statement);
                statements1 := statements1.append(statement1);
            end

            terminator1 := check_terminator(context, terminator);
            return (context, t_block(statements1, terminator1));
        end
    end
end
